--Create view for account type/account balances
drop view if exists app.v_cust_accounts_all_balances;
create or replace view app.v_cust_accounts_all_balances as (
	with m_data as (
	select
		acc.customer_id,
		date_trunc('month', t.date) as month,
		lag(date_trunc('month', t.date)) over (partition by customer_id order by customer_id,date_trunc('month', t.date)) as prev_month,
		sum(sum(amount)) over (partition by customer_id order by customer_id,date_trunc('month', t.date)) as m_sum,
		lag(sum(amount)) over (partition by customer_id order by customer_id,date_trunc('month', t.date)) as m_sum_prev_m,
		( sum(sum(amount)) over (partition by customer_id order by customer_id,date_trunc('month', t.date)) - lag(sum(amount)) over (partition by customer_id order by customer_id,date_trunc('month', t.date)) ) /
		nullif(lag(sum(amount)) over (partition by customer_id order by customer_id,date_trunc('month', t.date)),0) as m_vs_m
	from app.cust_acc_transactions t
	left join app.cust_accounts acc on acc.id = t.cust_account_id
	group by 1,2
	), acc_type_data as (
		select
			m.*,
			acc.account_type_id as acc_type_id,
			acct.description as acc_type_name,
			sum(sum(amount)) over (partition by m.customer_id,acc.account_type_id order by m.customer_id,month) as acc_type_sum,
			lag(sum(amount)) over (partition by m.customer_id,acc.account_type_id order by m.customer_id,month) as acc_type_sum_prev_m,
			( sum(sum(amount)) over (partition by m.customer_id,acc.account_type_id order by m.customer_id,month) - lag(sum(amount)) over (partition by m.customer_id,acc.account_type_id order by m.customer_id,month) )/
			nullif(lag(sum(amount)) over (partition by m.customer_id,acc.account_type_id order by m.customer_id,month),0) as acc_type_vs_m
		from app.cust_acc_transactions t
		left join app.cust_accounts acc on acc.id = t.cust_account_id
		left join app.account_types acct on acct.id = acc.account_type_id
		left join m_data m on m.customer_id = acc.customer_id and m.month = date_trunc('month', t.date)
		group by 1,2,3,4,5,6,7,8
	), basedata as (
	select
		to_char(month,'MM/YYYY') as month_label,
		to_char(prev_month,'MM/YYYY') as prev_month_label,
		atd.*,
		t.cust_account_id as acc_id,
		acc.description as acc_name,
		sum(sum(amount)) over (partition by t.cust_account_id order by t.cust_account_id,month) as account_sum,
		lag(sum(amount)) over (partition by t.cust_account_id order by t.cust_account_id,month) as account_sum_prev_m,
		( sum(sum(amount)) over (partition by t.cust_account_id order by t.cust_account_id,month) - lag(sum(amount)) over (partition by t.cust_account_id order by t.cust_account_id,month) )/
		nullif(lag(sum(amount)) over (partition by t.cust_account_id order by t.cust_account_id,month),0) as acc_vs_m
	from app.cust_acc_transactions t
	left join app.cust_accounts acc on acc.id = t.cust_account_id
	left join app.account_types acct on acct.id = acc.account_type_id
	left join acc_type_data atd on atd.customer_id = acc.customer_id and atd.month = date_trunc('month', t.date) and atd.acc_type_id = acc.account_type_id
	group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
	)
	select
		acc.customer_id,
		coalesce(base.month,date_trunc('month', now())) as month,
		coalesce(base.month_label, to_char(date_trunc('month', now()),'MM/YYYY')),
		base.prev_month_label,
		base.m_sum,
		base.m_sum_prev_m,
		base.m_vs_m,
		acc.account_type_id as acc_type_id,
		acct.description as acc_type_name,
		base.acc_type_sum,
		base.acc_type_sum_prev_m,
		base.acc_type_vs_m,
		acc.id as acc_id,
		acc.description as acc_name,
		base.account_sum,
		base.account_sum_prev_m,
		base.acc_vs_m
	from app.cust_accounts acc
	left join app.account_types acct on acct.id = acc.account_type_id
	left join basedata base on base.acc_id = acc.id
);


--Get account type balances
--Usage: select * from app.cust_accounts_get_all_balances(1);
create or replace function app.cust_accounts_get_all_balances(_cust_id integer, out _status smallint, out _msg text, out _d json) as $$
declare
	_first_m timestamp with time zone; _second_m timestamp with time zone;
	e6 text; e7 text; e8 text; e9 text;
begin
	-- Check customer
    select id into _cust_id from app.customers where id = _cust_id;
	-- Get latest two months
	select b.month, lag(b.month) over(partition by b.customer_id order by b.month) into _first_m,_second_m 
	from app.v_cust_accounts_all_balances b where month is not null and b.customer_id = _cust_id
	group by b.month,b.customer_id order by b.month desc limit 1;
	-- Get data
	_d := json_agg(t) from (
		select * from app.v_cust_accounts_all_balances r where r.customer_id = _cust_id and r.month in(_first_m,_second_m)
	)t;
	 if _cust_id is null or _d is null then
	 	_status := 404;
        _msg := 'e_all_account_balances_not_found';
      	_d := '{}'; 
    else
		_status := 200;
        _msg := 's_get_all_account_balances';
		
	end if;
    exception
        when others then get stacked diagnostics e6=returned_sqlstate, e7=message_text, e8=pg_exception_detail, e9=pg_exception_context;
        _status := 500;
        _msg := 'e_500';
        _d := json_build_object('code',e6,'message',e7,'detail',e8,'context',e9);
end;
$$ language plpgsql;